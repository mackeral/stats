#!/usr/local/bin/python

"""Command-line skeleton application for Google Cloud Datastore API.
Usage:
  $ python sample.py

You can also get help on all the command-line flags the program understands
by running:

  $ python sample.py --help

"""

import argparse
import glob
import httplib2
import json
import os
import re
import sys

from apiclient import discovery
from citation import Citation
from oauth2client import file
from oauth2client import client
from oauth2client import tools

import googledatastore as datastore

# Parser for command-line arguments.
parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.RawDescriptionHelpFormatter,
    parents=[tools.argparser])


# CLIENT_SECRETS is name of a file containing the OAuth 2.0 information for this
# application, including client_id and client_secret. You can see the Client ID
# and Client secret on the APIs page in the Cloud Console:
# <https://cloud.google.com/console#/project/23919286133/apiui>
CLIENT_SECRETS = os.path.join(os.path.dirname(__file__), 'client_secrets.json')

# Set up a Flow object to be used for authentication.
# Add one or more of the following scopes. PLEASE ONLY ADD THE SCOPES YOU
# NEED. For more information on using scopes please see
# <https://developers.google.com/+/best-practices>.
FLOW = client.flow_from_clientsecrets(CLIENT_SECRETS,
  scope=[
      'https://www.googleapis.com/auth/datastore',
      'https://www.googleapis.com/auth/userinfo.email',
    ],
    message=tools.message_if_missing(CLIENT_SECRETS))

parser.add_argument("fileStem")
def main(argv):
  # Parse the command-line flags.
  flags = parser.parse_args(argv[1:])

  # If the credentials don't exist or are invalid run through the native client
  # flow. The Storage object will ensure that if successful the good
  # credentials will get written back to the file.
  storage = file.Storage('sample.dat')
  credentials = storage.get()
  if credentials is None or credentials.invalid:
    credentials = tools.run_flow(FLOW, storage, flags)

  # Create an httplib2.Http object to handle our HTTP requests and authorize it
  # with our good Credentials.
  http = httplib2.Http()
  http = credentials.authorize(http)

  # Construct the service object for the interacting with the Google Cloud Datastore API.
  service = discovery.build('datastore', 'v1beta2', http=http) #build() returns a Resource object
  datasets = service.datasets()
  print dir(datasets)
  datastore.set_options(dataset='repostats')
  req = datastore.BeginTransactionRequest()
  resp = datastore.begin_transaction(req)
  tx = resp.transaction

  try:
	print "successful auth"
	jsonFiles = glob.glob(flags.fileStem + "*")
	for jsonFile in jsonFiles:
		m = re.search('\d([a-z\-_]+)\.', jsonFile);
		if not m:
			sys.exit('fileName in wrong format')
		docType = m.group(1)
		jsonContent = open(jsonFile)
		jsonCitations = json.load(jsonContent)
		jsonContent.close()

		citations = []

		for jsonCitation in jsonCitations:
			if docType in ('oai_dc', 'simple-dublin-core', 'qualified-dublin-core'):
				del jsonCitation["metadata"][0]["oai_dc:dc"][0]["$"]
			elif docType in ('oai_etdms'):
				del jsonCitation["metadata"][0]["thesis"][0]["$"]
			#don't bring in SelectedWorks citations
			if not re.match('oai:works.bepress.com:', jsonCitation['header'][0]['identifier'][0]):
				citations.append(Citation(jsonCitation, docType))
		
		for i, citation in enumerate(citations):
			#result = db.citations.update({ "identifier" : citation.identifier}, {"$set": citation.__dict__}, True)
			
			if(i == 0):
				print 'beginning ' + docType
			elif(i%500==0):
				print `i` + " upserted [" + docType + "]"

		print docType + " done. upserted " + str(len(citations)) + " entries"
		#good to here!



  except client.AccessTokenRefreshError:
    print ("The credentials have been revoked or expired, please re-run"
      "the application to re-authorize")


# For more information on the Google Cloud Datastore API you can visit:
#
#   https://developers.google.com/datastore/
#
# For more information on the Google Cloud Datastore API Python library surface you
# can visit:
#
#   https://developers.google.com/resources/api-libraries/documentation/datastore/v1beta2/python/latest/
#
# For information on the Python Client Library visit:
#
#   https://developers.google.com/api-client-library/python/start/get_started
if __name__ == '__main__':
  main(sys.argv)
